import os
from operator import add
from functools import reduce
from itertools import product

BENCHMARKS = {
    'int': [
        "400.perlbench",
        "401.bzip2",
        "403.gcc",
        "429.mcf",
        "445.gobmk",
        "456.hmmer",
        "458.sjeng",
        "462.libquantum",
        "464.h264ref",
        "471.omnetpp",
        "473.astar",
        "483.xalancbmk",
    ],
    'fp': [
        "410.bwaves",
        #"416.gamess", #FIXME: compile error
        "433.milc",
        "434.zeusmp",
        "435.gromacs",
        "436.cactusADM",
        "437.leslie3d",
        "444.namd",
        #"447.dealII", #FIXME: compile error
        #"450.soplex", #FIXME: compile error
        "453.povray",
        "454.calculix",
        "459.GemsFDTD",
        "465.tonto",
        "470.lbm",
        #"481.wrf", #FIXME: underflow flag
        "482.sphinx3",
    ]
}

def _spec_actions(source, target, env, for_signature):
    config = os.path.splitext(source[-1].name)[0]
    prefix = os.path.join(env['SPEC2006_DIR'], 'benchspec', 'CPU2006')
    run_dirs = [
        os.path.join(
            prefix, benchmark, 'run',
            'run_base_%s_%s.0000' % (env['INPUT'], config))
        for benchmark in BENCHMARKS[env['SUITE']]
    ]
    WriteInit = env['WRITE_INIT']
    WriteCommands = env['WRITE_COMMANDS']
    return [
        # Compile SPEC
        Copy(os.path.join(env['SPEC2006_DIR'], source[-1].name), source[-1]),
        ' '.join([
            'cd', env['SPEC2006_DIR'], '&&',
            'source', './shrc', '&&', 'runspec',
            '--action', 'setup',
            '--config', config,
            '--size', env['INPUT'],
            '--parallel_setup', str(GetOption('num_jobs'))
        ] + BENCHMARKS[env['SUITE']])
    ] + reduce(add, [
        [
            # Install overlays
            Delete(binary.dir.abspath),
            Copy(binary.dir.abspath, run_dir),
            Delete(os.path.join(binary.dir.abspath, '..', 'etc', 'init.d')),
            Mkdir(os.path.join(binary.dir.abspath, '..', 'etc', 'init.d')),
            WriteCommands(
                os.path.join(binary.dir.abspath, '..', 'etc', 'init.d', 'rcS'),
                binary.name,
                command.abspath),
            WriteInit(
                os.path.join(binary.dir.abspath, '..', 'etc', 'init.d', 'rcK'),
                '\n'.join(['#!/bin/sh', '# Do nothing']))
        ]
        for run_dir, binary, command in zip(run_dirs, target, source[:-1])
    ], [])

def main():
    Import('env')

    env.Append(BUILDERS={
        'SPEC2006': Builder(generator=_spec_actions)
    })

    spec2006 = dict()
    for suite, input_type in product(['int', 'fp'], ['test', 'ref']):
        commands = [
            os.path.abspath(os.path.join(
                'commands', '%s.%s.cmd' % (benchmark, input_type)))
            for benchmark in BENCHMARKS[suite]
        ]
        binaries = [
            os.path.join(
                env['OVERLAY_DIR'], benchmark + '.' + input_type, 'root',
                'sphinx_livepretend_base.riscv'
                if benchmark == '482.sphinx3'
                else 'Xalan_base.riscv'
                if benchmark == '483.xalancbmk'
                else benchmark[4:] + '_base.riscv')
            for benchmark in BENCHMARKS[suite]
        ]
        build = env.SPEC2006(
            binaries,
            commands + ['riscv.cfg'],
            SUITE=suite,
            INPUT=input_type)
        env.Alias('spec2006%s-%s' % (suite, input_type), build)
        env.SideEffect('#spec2006', build)
        for benchmark, binary in zip(BENCHMARKS[suite], build):
            bblvmlinux = env['BUILD_BBLVMLINUX'](
                env,
                '%s.%s' % (benchmark, input_type),
                os.path.abspath(os.path.join(binary.dir.abspath, '..')),
                [binary.abspath])
            env.Alias(
                'build-spec2006%s-%s' % (suite, input_type), bblvmlinux)
            env.Alias(
                'run-spec2006%s-%s' % (suite, input_type),
                env.Spike('#run-%s.%s' % (benchmark, input_type), bblvmlinux))

    env.Clean(
        'spec2006',
        Glob(os.path.join(env['SPEC2006_DIR'], 'benchspec', 'CPU2006', '*', 'exe')) + \
        Glob(os.path.join(env['SPEC2006_DIR'], 'benchspec', 'CPU2006', '*', 'run')) + \
        Glob(os.path.join(env['SPEC2006_DIR'], 'benchspec', 'CPU2006', '*', 'build')))

    return spec2006

if __name__ == 'SCons.Script':
    main()
